/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Task } from "./models/task";
import { Workbasket } from "./models/workbasket";
import { ClassificationSummary } from "./models/classification-summary";
import { TaskFilterOptions } from "./components/task-search/task-search";
export namespace Components {
    interface TaskList {
        /**
          * This number specifies the priority under which (inclusive) tasks will get a orange badge.
         */
        "orangePriority": number;
        /**
          * This number specifies the priority under which (inclusive) tasks will get a red badge.
         */
        "redPriority": number;
        /**
          * The taskId of the currently selected task
         */
        "selectedId": string;
        /**
          * The list of tasks, that should be displayed. Note, that this component does not limit the length.
         */
        "tasks": Task[];
    }
    interface TaskOpenApplication {
        "link": string;
    }
    interface TaskOpenButtonbar {
        /**
          * The current Task, this is used to get context for the events
         */
        "task": Task;
        /**
          * The list of to the user available workbaskets. This is used to provide a dropdown to transfer the task to another workbasket.
         */
        "workbaskets": Workbasket[];
    }
    interface TaskOpenDescription {
        /**
          * The task, of which the short description should be displayed
         */
        "task": Task;
    }
    interface TaskPreview {
        /**
          * The List of classifications, which exist. This is used to show the user a dropdown to specify the classification of the task.
         */
        "classifications": ClassificationSummary[];
        /**
          * The task, which should be displayed
         */
        "task": Task;
    }
    interface TaskSearch {
        /**
          * A list of existing Workbaskets, which the user is allowed to access. this list gets used to display a dropdown for easier filtering by Workbasket
         */
        "workbaskets": Workbasket[];
    }
}
declare global {
    interface HTMLTaskListElement extends Components.TaskList, HTMLStencilElement {
    }
    var HTMLTaskListElement: {
        prototype: HTMLTaskListElement;
        new (): HTMLTaskListElement;
    };
    interface HTMLTaskOpenApplicationElement extends Components.TaskOpenApplication, HTMLStencilElement {
    }
    var HTMLTaskOpenApplicationElement: {
        prototype: HTMLTaskOpenApplicationElement;
        new (): HTMLTaskOpenApplicationElement;
    };
    interface HTMLTaskOpenButtonbarElement extends Components.TaskOpenButtonbar, HTMLStencilElement {
    }
    var HTMLTaskOpenButtonbarElement: {
        prototype: HTMLTaskOpenButtonbarElement;
        new (): HTMLTaskOpenButtonbarElement;
    };
    interface HTMLTaskOpenDescriptionElement extends Components.TaskOpenDescription, HTMLStencilElement {
    }
    var HTMLTaskOpenDescriptionElement: {
        prototype: HTMLTaskOpenDescriptionElement;
        new (): HTMLTaskOpenDescriptionElement;
    };
    interface HTMLTaskPreviewElement extends Components.TaskPreview, HTMLStencilElement {
    }
    var HTMLTaskPreviewElement: {
        prototype: HTMLTaskPreviewElement;
        new (): HTMLTaskPreviewElement;
    };
    interface HTMLTaskSearchElement extends Components.TaskSearch, HTMLStencilElement {
    }
    var HTMLTaskSearchElement: {
        prototype: HTMLTaskSearchElement;
        new (): HTMLTaskSearchElement;
    };
    interface HTMLElementTagNameMap {
        "task-list": HTMLTaskListElement;
        "task-open-application": HTMLTaskOpenApplicationElement;
        "task-open-buttonbar": HTMLTaskOpenButtonbarElement;
        "task-open-description": HTMLTaskOpenDescriptionElement;
        "task-preview": HTMLTaskPreviewElement;
        "task-search": HTMLTaskSearchElement;
    }
}
declare namespace LocalJSX {
    interface TaskList {
        /**
          * This event gets emitted, when the user selects a task. It emits the taskId of the selected task.
         */
        "onSelectTask"?: (event: CustomEvent<string>) => void;
        /**
          * This number specifies the priority under which (inclusive) tasks will get a orange badge.
         */
        "orangePriority"?: number;
        /**
          * This number specifies the priority under which (inclusive) tasks will get a red badge.
         */
        "redPriority"?: number;
        /**
          * The taskId of the currently selected task
         */
        "selectedId"?: string;
        /**
          * The list of tasks, that should be displayed. Note, that this component does not limit the length.
         */
        "tasks"?: Task[];
    }
    interface TaskOpenApplication {
        "link"?: string;
    }
    interface TaskOpenButtonbar {
        /**
          * This event gets emitted, when the user wants to go leave the current page and return to the preview of the task.
         */
        "onBack"?: (event: CustomEvent<void>) => void;
        /**
          * This event gets emitted, when the user marks the current task as completed. It emits the taskId of the completed task.
         */
        "onCompleteTask"?: (event: CustomEvent<string>) => void;
        /**
          * This event gets emitted,when the user wants to transfer the task to another workbasket. It emits an object, which contains the taskId and the workbasketId, to which the task should be transferred to.
         */
        "onTransferTask"?: (event: CustomEvent<{ taskId: string, workbasketId: string }>) => void;
        /**
          * The current Task, this is used to get context for the events
         */
        "task"?: Task;
        /**
          * The list of to the user available workbaskets. This is used to provide a dropdown to transfer the task to another workbasket.
         */
        "workbaskets"?: Workbasket[];
    }
    interface TaskOpenDescription {
        /**
          * The task, of which the short description should be displayed
         */
        "task"?: Task;
    }
    interface TaskPreview {
        /**
          * The List of classifications, which exist. This is used to show the user a dropdown to specify the classification of the task.
         */
        "classifications"?: ClassificationSummary[];
        /**
          * This event gets emitted, when the user closes the current Task.
         */
        "onClose"?: (event: CustomEvent<void>) => void;
        /**
          * This event gets emitted, when the user wants to delete the current Task. It emits the taskId. This component does NOT include a second dialog, which confirms the users choice to delete the task. Please make sure your application includes a PopUp to confirm, if the user actually wants to delete the task.
         */
        "onDeleteTask"?: (event: CustomEvent<string>) => void;
        /**
          * This event gets emitted, when the user wants to open the task to work on it. It emits the taskId.
         */
        "onOpenTask"?: (event: CustomEvent<string>) => void;
        /**
          * This event gets emitted, when the user saves the Task. It emits the Task, that should be saved.
         */
        "onSaveTask"?: (event: CustomEvent<Task>) => void;
        /**
          * The task, which should be displayed
         */
        "task"?: Task;
    }
    interface TaskSearch {
        /**
          * This event gets emitted, when the "Add" button has been pressed.
         */
        "onAddTask"?: (event: CustomEvent<void>) => void;
        /**
          * This event gets emitted, when a user has pressed the "Search" button. It emits a TaskFilterOptions object, which contains all the parameters for the specified search.
         */
        "onSearchTasks"?: (event: CustomEvent<TaskFilterOptions>) => void;
        /**
          * A list of existing Workbaskets, which the user is allowed to access. this list gets used to display a dropdown for easier filtering by Workbasket
         */
        "workbaskets"?: Workbasket[];
    }
    interface IntrinsicElements {
        "task-list": TaskList;
        "task-open-application": TaskOpenApplication;
        "task-open-buttonbar": TaskOpenButtonbar;
        "task-open-description": TaskOpenDescription;
        "task-preview": TaskPreview;
        "task-search": TaskSearch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "task-list": LocalJSX.TaskList & JSXBase.HTMLAttributes<HTMLTaskListElement>;
            "task-open-application": LocalJSX.TaskOpenApplication & JSXBase.HTMLAttributes<HTMLTaskOpenApplicationElement>;
            "task-open-buttonbar": LocalJSX.TaskOpenButtonbar & JSXBase.HTMLAttributes<HTMLTaskOpenButtonbarElement>;
            "task-open-description": LocalJSX.TaskOpenDescription & JSXBase.HTMLAttributes<HTMLTaskOpenDescriptionElement>;
            "task-preview": LocalJSX.TaskPreview & JSXBase.HTMLAttributes<HTMLTaskPreviewElement>;
            "task-search": LocalJSX.TaskSearch & JSXBase.HTMLAttributes<HTMLTaskSearchElement>;
        }
    }
}
