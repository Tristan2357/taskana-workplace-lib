/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Task } from "./models/task";
import { Workbasket } from "./models/workbasket";
import { ClassificationSummary } from "./models/classification-summary";
export namespace Components {
    interface TaskList {
        "selectedId": string;
        "tasks": Task[];
    }
    interface TaskOpenApplication {
        "link": string;
    }
    interface TaskOpenButtonbar {
        "task": Task;
        "workbaskets": Workbasket[];
    }
    interface TaskOpenDescription {
        "task": Task;
    }
    interface TaskPreview {
        "classifications": ClassificationSummary[];
        "task": Task;
    }
    interface TaskSearch {
    }
}
declare global {
    interface HTMLTaskListElement extends Components.TaskList, HTMLStencilElement {
    }
    var HTMLTaskListElement: {
        prototype: HTMLTaskListElement;
        new (): HTMLTaskListElement;
    };
    interface HTMLTaskOpenApplicationElement extends Components.TaskOpenApplication, HTMLStencilElement {
    }
    var HTMLTaskOpenApplicationElement: {
        prototype: HTMLTaskOpenApplicationElement;
        new (): HTMLTaskOpenApplicationElement;
    };
    interface HTMLTaskOpenButtonbarElement extends Components.TaskOpenButtonbar, HTMLStencilElement {
    }
    var HTMLTaskOpenButtonbarElement: {
        prototype: HTMLTaskOpenButtonbarElement;
        new (): HTMLTaskOpenButtonbarElement;
    };
    interface HTMLTaskOpenDescriptionElement extends Components.TaskOpenDescription, HTMLStencilElement {
    }
    var HTMLTaskOpenDescriptionElement: {
        prototype: HTMLTaskOpenDescriptionElement;
        new (): HTMLTaskOpenDescriptionElement;
    };
    interface HTMLTaskPreviewElement extends Components.TaskPreview, HTMLStencilElement {
    }
    var HTMLTaskPreviewElement: {
        prototype: HTMLTaskPreviewElement;
        new (): HTMLTaskPreviewElement;
    };
    interface HTMLTaskSearchElement extends Components.TaskSearch, HTMLStencilElement {
    }
    var HTMLTaskSearchElement: {
        prototype: HTMLTaskSearchElement;
        new (): HTMLTaskSearchElement;
    };
    interface HTMLElementTagNameMap {
        "task-list": HTMLTaskListElement;
        "task-open-application": HTMLTaskOpenApplicationElement;
        "task-open-buttonbar": HTMLTaskOpenButtonbarElement;
        "task-open-description": HTMLTaskOpenDescriptionElement;
        "task-preview": HTMLTaskPreviewElement;
        "task-search": HTMLTaskSearchElement;
    }
}
declare namespace LocalJSX {
    interface TaskList {
        "onSelectedIdChange"?: (event: CustomEvent<any>) => void;
        "selectedId"?: string;
        "tasks"?: Task[];
    }
    interface TaskOpenApplication {
        "link"?: string;
    }
    interface TaskOpenButtonbar {
        "onBackEvent"?: (event: CustomEvent<any>) => void;
        "onCompleteEvent"?: (event: CustomEvent<any>) => void;
        "onTransferEvent"?: (event: CustomEvent<any>) => void;
        "task"?: Task;
        "workbaskets"?: Workbasket[];
    }
    interface TaskOpenDescription {
        "task"?: Task;
    }
    interface TaskPreview {
        "classifications"?: ClassificationSummary[];
        "onCloseEvent"?: (event: CustomEvent<void>) => void;
        "onDeleteEvent"?: (event: CustomEvent<string>) => void;
        "onOpenTaskEvent"?: (event: CustomEvent<string>) => void;
        "onSaveEvent"?: (event: CustomEvent<Task>) => void;
        "task"?: Task;
    }
    interface TaskSearch {
    }
    interface IntrinsicElements {
        "task-list": TaskList;
        "task-open-application": TaskOpenApplication;
        "task-open-buttonbar": TaskOpenButtonbar;
        "task-open-description": TaskOpenDescription;
        "task-preview": TaskPreview;
        "task-search": TaskSearch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "task-list": LocalJSX.TaskList & JSXBase.HTMLAttributes<HTMLTaskListElement>;
            "task-open-application": LocalJSX.TaskOpenApplication & JSXBase.HTMLAttributes<HTMLTaskOpenApplicationElement>;
            "task-open-buttonbar": LocalJSX.TaskOpenButtonbar & JSXBase.HTMLAttributes<HTMLTaskOpenButtonbarElement>;
            "task-open-description": LocalJSX.TaskOpenDescription & JSXBase.HTMLAttributes<HTMLTaskOpenDescriptionElement>;
            "task-preview": LocalJSX.TaskPreview & JSXBase.HTMLAttributes<HTMLTaskPreviewElement>;
            "task-search": LocalJSX.TaskSearch & JSXBase.HTMLAttributes<HTMLTaskSearchElement>;
        }
    }
}
